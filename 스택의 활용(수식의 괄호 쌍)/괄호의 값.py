'''
문제
4개의 기호 ‘(’, ‘)’, ‘[’, ‘]’를 이용해서 만들어지는 괄호열 중에서 올바른 괄호열이란 다음과 같이 정의된다.

한 쌍의 괄호로만 이루어진 ‘()’와 ‘[]’는 올바른 괄호열이다.
만일 X가 올바른 괄호열이면 ‘(X)’이나 ‘[X]’도 모두 올바른 괄호열이 된다.
X와 Y 모두 올바른 괄호열이라면 이들을 결합한 XY도 올바른 괄호열이 된다.
예를 들어 ‘(()[[]])’나 ‘(())[][]’ 는 올바른 괄호열이지만 ‘([)]’ 나 ‘(()()[]’ 은 모두 올바른 괄호열이 아니다. 
우리는 어떤 올바른 괄호열 X에 대하여 그 괄호열의 값(괄호값)을 아래와 같이 정의하고 값(X)로 표시한다.

‘()’ 인 괄호열의 값은 2이다.
‘[]’ 인 괄호열의 값은 3이다.
‘(X)’ 의 괄호값은 2×값(X) 으로 계산된다.
‘[X]’ 의 괄호값은 3×값(X) 으로 계산된다.
올바른 괄호열 X와 Y가 결합된 XY의 괄호값은 값(XY)= 값(X)+값(Y) 로 계산된다.
예를 들어 ‘(()[[]])([])’ 의 괄호값을 구해보자. ‘()[[]]’ 의 괄호값이 2 + 3×3=11 이므로 
‘(()[[]])’의 괄호값은 2×11=22 이다. 그리고 ‘([])’의 값은 2×3=6 이므로 전체 괄호열의 값은 22 + 6 = 28 이다.

여러분이 풀어야 할 문제는 주어진 괄호열을 읽고 그 괄호값을 앞에서 정의한대로 계산하여 출력하는 것이다.

입력
첫째 줄에 괄호열을 나타내는 문자열(스트링)이 주어진다. 단 그 길이는 1 이상, 30 이하이다.

출력
첫째 줄에 그 괄호열의 값을 나타내는 정수를 출력한다. 만일 입력이 올바르지 못한 괄호열이면 반드시 0을 출력해야 한다.
'''
import sys
from collections import deque

val = list(sys.stdin.readline().strip())

stack = deque()

cal = 0
result = 0
tmp = [0,'',0] # 덤프

for i in range(len(val)):
    # print(stack, result)
    # ((())[[]])([])
    if val[i] == '(':
        stack.append([i, val[i], 0]) # ([인덱스, 괄호문자, 셈해야하는 값])
    elif val[i] == ')':
        if stack and stack[-1][1] == '(': # 소괄호 셈
            if i - stack[-1][0] == 1: # 인덱스 차이가 1이면 소괄호 덧셈(+2)
                tmp = stack.pop() # 일단 임시 변수에 스택을 팝한 값을 담음
                if stack: # 만약 스택이 남아있다면
                    stack[-1][2] += 2 # 남아있는 스택의 셈해야하는 값에 +2
                else: # 만약 스택이 비었다면
                    result += tmp[2] + 2 # 결과 값에 팝한 스택의 셈해야 하는 값에 2를 더한 후 덧셈
            else: # 인덱스 차이가 1이 넘어가면 소괄호 곱셈
                tmp = stack.pop() # 마찬가지로 임시 변수에 스택을 팝한 값을 담음
                if stack: # 만약 스택이 남아있다면
                    stack[-1][2] += tmp[2] * 2 
                    # (남아있는 스택의 셈해야하는 값)에 (팝한 스택의 셈해야하는 값 * 2)를 더함
                    '''
                    예를 들어보자면
                    ((()))의 경우
                    첫번 째 ()는 위의 조건문을 통해 바깥 (에 2가 더해진 후 팝될 것
                    두번 째 (는 2가 더해져있음. 이것에 2를 곱한 뒤 바깥 (에 더함
                    세번 째 (는 스택이 비어있으므로 결과값에 현재 본인의 셈해야 하는 값(2*2)에 2를 곱해 결과 값에 덧세
                    '''
                else: # 만약 스택이 비었다면
                    result += tmp[2] * 2 # 결과 값에 팝한 스택의 셈해야 하는 값에 2를 곱해 덧셈
        else: # (는 없는데 )만 나왔다면 결과는 0
            stack.append([0]) # 에러 체크를 위해 스택에 덤프 값 집어넣기
            break
    elif val[i] == '[':
        stack.append([i, val[i], 0])
    elif val[i] == ']':
        if stack and stack[-1][1] == '[':
            if i - stack[-1][0] == 1:
                tmp = stack.pop()
                if stack:
                    stack[-1][2] += 3
                else:
                    result += tmp[2] + 3
            else:
                tmp = stack.pop()
                if stack:
                    stack[-1][2] += tmp[2] * 3
                else:
                    result += tmp[2] * 3
        else:
            stack.append([0,0,0])
            break
# # ([()()]([]))
# (2+3*3)*2 + 2*3
if stack:
    print(0)
else:
    print(result)



'''
예제 입력 1 
(()[[]])([])
예제 출력 1 
28
예제 입력 2 
[][]((])
예제 출력 2 
0
'''